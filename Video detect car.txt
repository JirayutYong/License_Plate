import cv2
import pandas as pd
import numpy as np
import time
from ultralytics import YOLO
from tracker import *
from datetime import datetime
import os


input_folder = './test_license'

now = datetime.now()
model = YOLO('yolov8n.pt')



def RGB(event, x, y, flags, param):
    if event == cv2.EVENT_MOUSEMOVE:
        colorsBGR = [x, y]
        print(colorsBGR)

cv2.namedWindow('RGB')
cv2.setMouseCallback('RGB', RGB)

cap = cv2.VideoCapture('Video_Car.mp4')

my_file = open("coco.txt", "r")
data = my_file.read()
class_list = data.split("\n")

count = 0
tracker = Tracker()
area = [(70, 540), (70, 680), (1070, 680), (1070, 540)]  # เปลี่ยนเป็นเส้นตรง
area_c = set()

def imgwrite(img):
    now = datetime.now()
    current_time = now.strftime("%d_%m_%Y_%H_%M_%S")
    filename = '%s.png' % current_time
    cv2.imwrite(os.path.join(input_folder, filename), img)

desired_fps = 30  # ปรับความเร็วของเฟรม
frame_time_interval = 1 / desired_fps
skip_frames = 5  # ข้ามทุกรอบที่กำหนด


last_count_time = time.time()

while True:
    start_time = time.time()
    ret, frame = cap.read()
    if not ret:
        break

    # ลดขนาดเฟรม
    frame = cv2.resize(frame, (1250, 750))

    count += 1
    if count % skip_frames != 0:
        continue

    results = model.predict(frame)
    a = results[0].boxes.data
    px = pd.DataFrame(a).astype("float")

    car_list = []
    for index, row in px.iterrows():
        x1, y1, x2, y2, _, d = map(int, row)
        c = class_list[d]

        if 'car' in c:
            car_list.append([x1, y1, x2, y2])

    bbox_idx = tracker.update(car_list)
    for bbox in bbox_idx:
        x3, y3, x4, y4, id = bbox
        results = cv2.pointPolygonTest(np.array(area, np.int32), ((x4, y4)), False)

        # Check if enough time has passed since the last count
        if time.time() - last_count_time >= 1.25:
            cv2.rectangle(frame, (x3, y3), (x4, y4), (0, 255, 0), 2)
            cv2.circle(frame, (x4, y4), 4, (255, 0, 255), -1)
            if results >= 0:
                imgwrite(frame)
                area_c.add(id)
                last_count_time = time.time()  # Update the last count time


    cv2.polylines(frame, [np.array(area, np.int32)], True, (255, 0, 0), 2)
    print(area_c)
    k = len(area_c)
    cv2.putText(frame, str(k), (90, 150), cv2.FONT_HERSHEY_PLAIN, 5, (0, 255, 255), 3)
    cv2.imshow("RGB", frame)

    elapsed_time = time.time() - start_time
    sleep_time = max(0, frame_time_interval - elapsed_time)
    time.sleep(sleep_time)

    if cv2.waitKey(1) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
